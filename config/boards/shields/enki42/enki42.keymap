/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        cb_Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <18 19>;
        };

        cb_closew {
            bindings = <&kp RA(F4)>;
            key-positions = <1 2>;
        };

        cb_quicker {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <2 3>;
        };

        cb_ditto {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <3 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |       |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |       |  H  |  J   |  K  |  L  |  ;  |    '      |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |       |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
            //                    | ALT | WIN | LWR |       | RSE | SPC  | RTN |

            bindings = <
&kp TAB         &kp Q  &kp W  &kp E      &kp R     &kp T          &kp Y      &kp U   &kp I         &kp O    &kp P     &kp BSPC
&kp CAPS        &kp A  &kp S  &kp D      &lt 4 F   &lt 5 G        &kp H      &kp J   &kp K         &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V     &kp B          &kp N      &kp M   &kp COMMA     &kp DOT  &kp FSLH  &mt RSHFT BACKSLASH
                              &kp LCTRL  &kp LGUI  &lt 1 ENTER    &kp SPACE  &tog 2  &lt 3 ESCAPE
            >;
        };

        lower_layer {
            // ----------------------------------------------------------------------------------
            // |    |  !  |  @  |  #  |  $  |  %  |          |  ^  |  &  |  *  |  (  |  )  |    DEL   |
            // |    |  _  |  +  |  {  |  }  | "|" |          | LFT | PGUP|  UP |PGDN|  `  |     ~     |
            // |    | ESC | GUI | ALT | CAPS|  "  |          | HOME| LFT | DWN | RGT| PRSC| SHFT(RET) |
            //                        |     |     |           | ADJ | SPC |  RET  |

            bindings = <
&trans  &kp EXCL   &kp AT       &kp HASH         &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS        &kp UP_ARROW        &kp LPAR   &kp RPAR           &kp DEL
&trans  &kp MINUS  &kp KP_PLUS  &kp LBRC         &kp HOME  &kp END      &kp END    &kp LEFT_ARROW  &kp DOWN            &kp RIGHT  &kp GRAVE          &kp RETURN
&trans  &kp ESC    &kp LGUI     &kp RIGHT_BRACE  &kp CLCK  &kp DQT      &kp MINUS  &kp EQUAL       &kp LS(UNDERSCORE)  &kp PLUS   &kp DOUBLE_QUOTES  &mt RSHFT TILDE
                                &trans           &trans    &trans       &kp SPACE  &mo 3           &kp RET
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
            // |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
            //                       |     | ADJ | BKSP |    |     |

            bindings = <
&kp ESC       &kp N1     &kp N2     &kp N3            &kp N4    &kp N5      &kp N6     &kp N7         &kp N8      &kp N9     &kp N0     &kp DEL
&kp LEFT_WIN  &kp MINUS  &kp EQUAL  &kp LBKT          &kp RBKT  &kp BSLH    &kp LEFT   &kp UP_ARROW   &kp DOWN    &kp RIGHT  &kp COLON  &kp DOUBLE_QUOTES
&kp F1        &kp F2     &kp F3     &kp F4            &kp F5    &kp F6      &kp F7     &kp F8         &kp F9      &kp F10    &kp F11    &kp F12
                                    &mt CAPSLOCK TAB  &trans    &mo 3       &kp SPACE  &kp BACKSPACE  &kp RETURN
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
            // | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |  USB  | BLE |     |     |     |        |
            // |          |          |          |          |    | K_SLEEP |   | RESET |     |     |     |     |        |
            //                                              |     |     |     |     |     |

            bindings = <
&rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_EFF  &none   &rgb_ug RGB_TOG    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_EFR  &none   &none              &none         &none         &none         &none         &none         &none
&none            &none            &none            &none            &none   &kp K_SLEEP        &sys_reset    &out OUT_USB  &out OUT_BLE  &none         &none         &none
                                                   &trans           &trans  &trans             &tog 3        &trans        &trans
            >;
        };

        number {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7        &kp NUMBER_8  &kp N9        &kp N0     &kp BACKSPACE
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS   &kp STAR
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS  &kp SLASH
                        &trans  &trans  &trans    &trans  &trans        &trans
            >;
        };

        symbol {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp DOLLAR     &kp PERCENT   &kp CARET             &trans                 &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp EXCL       &kp AT_SIGN   &kp HASH              &trans                 &trans
                        &trans  &trans  &trans    &trans  &trans         &trans
            >;
        };
    };
};
